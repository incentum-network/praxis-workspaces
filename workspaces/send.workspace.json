{
	"name": "send",
	"segment": 1,
	"templates": [
		{
			"other": {},
			"name": "incentum-send-to",
			"ledger": "THWJcWwvAGCqGgzpqxwDH9DgaXSwrtJWBm",
			"versionMajor": 0,
			"versionMinor": 0,
			"versionPatch": 1,
			"description": "A contract to send tokens or coins to a specific ledger.",
			"tags": [],
			"reducers": [
				{
					"type": "start",
					"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
					"language": "jsonata"
				},
				{
					"type": "end",
					"code": "(\n  $x.assert.isNotTrue($state.ended, 'contract was ended');\n  $x.assert.equal($state.from, $action.ledger, 'you are not the owner of this contract');\n  $x.assert.equal($count($inputs), 1, 'only one input is allowed');\n  $i := $inputs[0];\n  $o := $i.output;\n  $x.assert.equal($count($o.coins), 0, 'input cannot have any coins');\n\n  $msgs := $append($state.view.msgs, [$form.msg]);\n  $merged := {\n    'ended': true, \n    'view': {\n      'title': $state.view.title,\n      'subtitle': $state.view.subtitle,\n      'msgs': $msgs \n    }\n  };\n  $newstate := $merge([$state, $merged]);\n  $x.result($newstate)\n)",
					"language": "jsonata"
				},
				{
					"type": "sendTo",
					"code": "(\n  $x.assert.equal($count($inputs), 1, 'only one input is allowed');\n  $x.assert.isNotTrue($state.ended, 'contract was ended');\n  $x.assert.equal($state.from, $action.ledger, 'you are not the owner of this contract');\n\n  $i := $inputs[0];\n  $o := $i.output;\n  $x.assert.isAtLeast($count($o.coins), 1, 'must have at least one coin');\n  $coin := $o.coins[0];\n  \n  $msg := 'Sent ' & $x.toDisplay($coin) & ' ' & $coin.symbol;\n  $view := {\n    'view': {\n      'title': $state.view.title,\n      'subtitle': $state.view.subtitle,\n      'msgs': $append($state.view.msgs, [$msg])\n    }\n  };\n  $newState := $merge([$state, $view]);\n  $outTo := $x.output($state.to, $o.coins, $form.title, $form.subtitle, $form.description, $action.tags, {}, [$form.msg]);\n  $x.result($newState, [$outTo])\n)\n",
					"language": "jsonata"
				}
			]
		}
	],
	"templateSel": 0,
	"reducerSel": 2,
	"outputs": [
		{
			"name": "sendTo",
			"json": "{\n\t\"tags\": [],\n\t\"ledger\": \"Alice\",\n\t\"data\": {},\n\t\"title\": \"My Money\",\n\t\"subtitle\": \"My Money\",\n\t\"msgs\": [],\n\t\"description\": \"\",\n\t\"coins\": [{\n\t  \"symbol\": \"ETH\",\n\t  \"amount\": \"10000000000000000000\",\n\t  \"decimals\": 18,\n\t  \"mint\": \"mymint\"\n\t}]\n}",
			"output": {
				"tags": [],
				"ledger": "Alice",
				"data": {},
				"title": "My Money",
				"subtitle": "My Money",
				"msgs": [],
				"description": "",
				"coins": [
					{
						"symbol": "ETH",
						"amount": "10000000000000000000",
						"decimals": 18,
						"mint": "mymint"
					}
				]
			}
		},
		{
			"name": "end",
			"json": "{\n\t\"tags\": [],\n\t\"ledger\": \"Alice\",\n\t\"data\": {},\n\t\"title\": \"\",\n\t\"subtitle\": \"\",\n\t\"msgs\": [],\n\t\"description\": \"\",\n\t\"coins\": []\n}",
			"output": {
				"tags": [],
				"ledger": "Alice",
				"data": {},
				"title": "",
				"subtitle": "",
				"msgs": [],
				"description": "",
				"coins": []
			}
		}
	],
	"outputSel": 1,
	"actions": [
		{
			"name": "start",
			"json": "{\n\t\"template\": \"incentum-send-to\",\n\t\"form\": {\n\t  \"to\": \"dominic\",\n\t  \"title\": \"SendTo Dominic\",\n\t  \"subtitle\": \"Coins to Dominic\"\n\t},\n\t\"tags\": [\"sendTo\"],\n\t\"ledger\": \"Alice\",\n\t\"type\": \"start\",\n\t\"inputs\": []\n}",
			"action": {
				"template": "incentum-send-to",
				"form": {
					"to": "dominic",
					"title": "SendTo Dominic",
					"subtitle": "Coins to Dominic"
				},
				"tags": [
					"sendTo"
				],
				"ledger": "Alice",
				"type": "start",
				"inputs": []
			},
			"template": ""
		},
		{
			"name": "sendTo",
			"json": "{\n\t\"template\": \"incentum-send-to\",\n\t\"form\": {\n\t  \"title\": \"Money from dad\",\n\t  \"subtitle\": \"Money for rent\",\n\t  \"msg\": \"Here's some more money\"\n\t},\n\t\"tags\": [\"sendTo\"],\n\t\"ledger\": \"Alice\",\n\t\"type\": \"sendTo\",\n\t\"inputs\": [\n\t  \"sendTo\"\n\t]\n}",
			"action": {
				"template": "incentum-send-to",
				"form": {
					"title": "Money from dad",
					"subtitle": "Money for rent",
					"msg": "Here's some more money"
				},
				"tags": [
					"sendTo"
				],
				"ledger": "Alice",
				"type": "sendTo",
				"inputs": [
					"sendTo"
				]
			},
			"template": ""
		},
		{
			"name": "end",
			"json": "{\n\t\"template\": \"incentum-send-to\",\n\t\"form\": {},\n\t\"ledger\": \"Alice\",\n\t\"type\": \"end\",\n\t\"inputs\": [\"end\"]\n}",
			"action": {
				"template": "incentum-send-to",
				"form": {},
				"ledger": "Alice",
				"type": "end",
				"inputs": [
					"end"
				]
			},
			"template": ""
		},
		{
			"name": "ended",
			"json": "{\n\t\"template\": \"incentum-send-to\",\n\t\"form\": {\n\t  \"title\": \"Money from dad\",\n\t  \"subtitle\": \"Money for rent, please don't snort it\",\n\t  \"amount\": 1,\n\t  \"coinIdx\": 0,\n\t  \"msg\": \"Here's some more money.\"\n\t},\n\t\"tags\": [\"sendTo\"],\n\t\"ledger\": \"Alice\",\n\t\"type\": \"sendTo\",\n\t\"inputs\": [\n\t  \"sendTo\"\n\t]\n}",
			"action": {
				"template": "incentum-send-to",
				"form": {
					"title": "Money from dad",
					"subtitle": "Money for rent, please don't snort it",
					"amount": 1,
					"coinIdx": 0,
					"msg": "Here's some more money."
				},
				"tags": [
					"sendTo"
				],
				"ledger": "Alice",
				"type": "sendTo",
				"inputs": [
					"sendTo"
				]
			},
			"template": ""
		}
	],
	"actionSel": 2,
	"states": [
		{
			"name": "start",
			"json": "{\n\t\"coins\": [],\n\t\"state\": {}\n}"
		},
		{
			"name": "sendTo",
			"json": "{\n\t\"state\": {\n\t\t\"ended\": false,\n\t\t\"to\": \"dominic\",\n\t\t\"from\": \"Alice\",\n\t\t\"view\": {\n\t\t\t\"title\": \"SendTo Dominic\",\n\t\t\t\"subtitle\": \"Coins to Dominic\",\n\t\t\t\"msgs\": [\n\t\t\t\t\"sendTo started\"\n\t\t\t]\n\t\t}\n\t}\n}"
		},
		{
			"name": "end",
			"json": "{\n\t\"coins\": [],\n\t\"state\": {\n\t  \"ended\": false,\n\t\t\"to\": \"dominic\",\n\t\t\"from\": \"Alice\",\n\t\t\"view\": {\n\t\t\t\"title\": \"SendTo Dominic\",\n\t\t\t\"subtitle\": \"Coins to Dominic\",\n\t\t\t\"msgs\": [\n\t\t\t\t\"sendTo started\",\n\t\t\t\t\"Sent  1 ETH\"\n\t\t\t]\n\t  }\n\t}\n}"
		},
		{
			"name": "ended",
			"json": "{\n  \"state\": {\n\t\t\"ended\": true,\n\t\t\"to\": \"dominic\",\n\t\t\"from\": \"Alice\",\n\t\t\"view\": {\n\t\t\t\"title\": \"SendTo Dominic\",\n\t\t\t\"subtitle\": \"Coins to Dominic\",\n\t\t\t\"msgs\": [\n\t\t\t\t\"sendTo started\",\n\t\t\t\t\"Sent  1 ETH\",\n\t\t\t\t\"sendTo ended\"\n\t\t\t]\n\t\t}\n\t},\n\t\"coins\": []\n}"
		}
	],
	"stateSel": 2,
	"results": [
		{
			"name": "start",
			"result": {
				"outputs": [
					{
						"ledger": "Alice",
						"data": {},
						"coins": [],
						"tags": [],
						"msgs": [],
						"title": "SendTo Dominic",
						"subtitle": "Coins to Dominic",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $newstate := $state ~> | ended | true |;\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.ledger;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($state.to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $x.result($newState, [$out, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "sendTo",
					"tags": [],
					"other": {},
					"ledger": "Ledger",
					"versionMajor": 1,
					"versionMinor": 0,
					"versionPatch": 0,
					"reducers": [
						{
							"type": "start",
							"language": "jsonata",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n"
						},
						{
							"type": "end",
							"language": "jsonata",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)"
						},
						{
							"type": "sendTo",
							"language": "jsonata",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)"
						}
					],
					"description": "send Description"
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "9f21afaec5140ff12cb9e6ccc44c6d5fad6edfbf76471de2db443ea8dc3bf750"
			}
		},
		{
			"name": "start",
			"result": {
				"outputs": [
					{
						"ledger": "Alice",
						"data": {},
						"coins": [],
						"tags": [
							"sendTo"
						],
						"msgs": [],
						"title": "SendTo Dominic",
						"subtitle": "Coins to Dominic",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $newstate := $state ~> | ended | true |;\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.ledger;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($state.to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $x.result($newState, [$out, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "sendTo",
					"tags": [],
					"other": {},
					"ledger": "Ledger",
					"versionMajor": 1,
					"versionMinor": 0,
					"versionPatch": 0,
					"reducers": [
						{
							"type": "start",
							"language": "jsonata",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n"
						},
						{
							"type": "end",
							"language": "jsonata",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)"
						},
						{
							"type": "sendTo",
							"language": "jsonata",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)"
						}
					],
					"description": "send Description"
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "c79457fe285da21509498d64ed2930432591bd1b6aaad80d5c6f489e30f2880f"
			}
		},
		{
			"name": "sendTo",
			"result": {
				"outputs": [
					{
						"actionKey": "",
						"key": "sendTo",
						"ledger": "Alice",
						"data": {},
						"tags": [],
						"title": "",
						"subtitle": "",
						"description": "",
						"msgs": [],
						"coins": [
							{
								"amount": "NaN",
								"symbol": "ETH",
								"mint": "mymint",
								"other": {},
								"decimals": 18
							}
						]
					},
					{
						"ledger": "dominic",
						"data": {},
						"coins": [
							{
								"amount": "NaN",
								"symbol": "ETH",
								"mint": "mymint",
								"decimals": 18
							}
						],
						"tags": [
							"sendTo"
						],
						"msgs": [],
						"title": "SendTo Dominic",
						"subtitle": "Coins to Dominic",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent   ETH"
							]
						}
					},
					"coins": [
						{
							"amount": "NaN",
							"symbol": "ETH",
							"mint": "mymint",
							"other": {},
							"decimals": 18
						}
					]
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $newstate := $state ~> | ended | true |;\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.ledger;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($state.to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $x.result($newState, [$out, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "sendTo",
					"tags": [],
					"other": {},
					"ledger": "Ledger",
					"versionMajor": 1,
					"versionMinor": 0,
					"versionPatch": 0,
					"reducers": [
						{
							"type": "start",
							"language": "jsonata",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n"
						},
						{
							"type": "end",
							"language": "jsonata",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)"
						},
						{
							"type": "sendTo",
							"language": "jsonata",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)"
						}
					],
					"description": "send Description"
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "8420df9ea83c850b40d656800a9c8e8ceee7e0f0d975227a19ccbcf86b340cb7"
			}
		},
		{
			"name": "sendTo",
			"result": {
				"outputs": [
					{
						"actionKey": "",
						"key": "sendTo",
						"ledger": "Alice",
						"data": {},
						"tags": [],
						"title": "",
						"subtitle": "",
						"description": "",
						"msgs": [],
						"coins": [
							{
								"amount": "9000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"other": {},
								"decimals": 18
							}
						]
					},
					{
						"ledger": "dominic",
						"data": {},
						"coins": [
							{
								"amount": "1000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"decimals": 18
							}
						],
						"tags": [
							"sendTo"
						],
						"msgs": [],
						"title": "",
						"subtitle": "",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $newstate := $state ~> | ended | true |;\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.ledger;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($state.to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $x.result($newState, [$out, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "sendTo",
					"tags": [],
					"other": {},
					"ledger": "Ledger",
					"versionMajor": 1,
					"versionMinor": 0,
					"versionPatch": 0,
					"reducers": [
						{
							"type": "start",
							"language": "jsonata",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n"
						},
						{
							"type": "end",
							"language": "jsonata",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)"
						},
						{
							"type": "sendTo",
							"language": "jsonata",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)"
						}
					],
					"description": "send Description"
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "31d59f71603c67ad302111ce2f182eb4243dbed63846395aad3eea836b6389a7"
			}
		},
		{
			"name": "sendTo",
			"result": {
				"outputs": [
					{
						"actionKey": "",
						"key": "sendTo",
						"ledger": "Alice",
						"data": {},
						"tags": [],
						"title": "",
						"subtitle": "",
						"description": "",
						"msgs": [],
						"coins": [
							{
								"amount": "9000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"other": {},
								"decimals": 18
							}
						]
					},
					{
						"ledger": "dominic",
						"data": {},
						"coins": [
							{
								"amount": "1000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"decimals": 18
							}
						],
						"tags": [
							"sendTo"
						],
						"msgs": [],
						"title": "",
						"subtitle": "",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $newstate := $state ~> | ended | true |;\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.ledger;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($state.to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount) ~> | tags | $tags |;\n      $x.result($newState, [$out, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "sendTo",
					"tags": [],
					"other": {},
					"ledger": "Ledger",
					"versionMajor": 1,
					"versionMinor": 0,
					"versionPatch": 0,
					"reducers": [
						{
							"type": "start",
							"language": "jsonata",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n"
						},
						{
							"type": "end",
							"language": "jsonata",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)"
						},
						{
							"type": "sendTo",
							"language": "jsonata",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)"
						}
					],
					"description": "send Description"
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "5276e438bb35f9b4077999ff14e018455051546b12453a353a90cff7e7c22b71"
			}
		},
		{
			"name": "sendTo",
			"result": {
				"outputs": [
					{
						"actionKey": "",
						"key": "sendTo",
						"ledger": "Alice",
						"data": {},
						"tags": [],
						"title": "",
						"subtitle": "",
						"description": "",
						"msgs": [],
						"coins": [
							{
								"amount": "9000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"other": {},
								"decimals": 18
							}
						]
					},
					{
						"ledger": "dominic",
						"data": {},
						"coins": [
							{
								"amount": "1000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"decimals": 18
							}
						],
						"tags": [
							"sendTo"
						],
						"msgs": [],
						"title": "",
						"subtitle": "",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $newstate := $state ~> | ended | true |;\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.ledger;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($state.to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags);\n      $tags := $append($o.tags, $action.tags);\n      $x.log('tags', $tags);\n      $out := $x.outputLessCoin($o, $idx, $amount) ~> | tags | $tags |;\n      $x.result($newState, [$out, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "sendTo",
					"tags": [],
					"other": {},
					"ledger": "Ledger",
					"versionMajor": 1,
					"versionMinor": 0,
					"versionPatch": 0,
					"reducers": [
						{
							"type": "start",
							"language": "jsonata",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n"
						},
						{
							"type": "end",
							"language": "jsonata",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)"
						},
						{
							"type": "sendTo",
							"language": "jsonata",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)"
						}
					],
					"description": "send Description"
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "cb73ed7bac7b00cafa809e571b386d08e931811269e1479cda7a1fa8c33fb5ae"
			}
		},
		{
			"name": "sendTo",
			"result": {
				"outputs": [
					{
						"actionKey": "",
						"key": "sendTo",
						"ledger": "Alice",
						"data": {},
						"tags": [
							"sendTo"
						],
						"title": "",
						"subtitle": "",
						"description": "",
						"msgs": [],
						"coins": [
							{
								"amount": "9000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"other": {},
								"decimals": 18
							}
						]
					},
					{
						"ledger": "dominic",
						"data": {},
						"coins": [
							{
								"amount": "1000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"decimals": 18
							}
						],
						"tags": [
							"sendTo"
						],
						"msgs": [],
						"title": "",
						"subtitle": "",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $newstate := $state ~> | ended | true |;\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.ledger;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($state.to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags);\n      $tags := $append($o.tags, $action.tags);\n      $x.log('tags', $tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "sendTo",
					"tags": [],
					"other": {},
					"ledger": "Ledger",
					"versionMajor": 1,
					"versionMinor": 0,
					"versionPatch": 0,
					"reducers": [
						{
							"type": "start",
							"language": "jsonata",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n"
						},
						{
							"type": "end",
							"language": "jsonata",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)"
						},
						{
							"type": "sendTo",
							"language": "jsonata",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)"
						}
					],
					"description": "send Description"
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "8f3acef27ac80825a8beccc827330b68ee83faa99302fc39daf996c87c75e278"
			}
		},
		{
			"name": "sendTo",
			"result": {
				"outputs": [
					{
						"actionKey": "",
						"key": "sendTo",
						"ledger": "Alice",
						"data": {},
						"tags": [
							"sendTo"
						],
						"title": "",
						"subtitle": "",
						"description": "",
						"msgs": [],
						"coins": [
							{
								"amount": "9000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"other": {},
								"decimals": 18
							}
						]
					},
					{
						"ledger": "dominic",
						"data": {},
						"coins": [
							{
								"amount": "1000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"decimals": 18
							}
						],
						"tags": [
							"sendTo"
						],
						"msgs": [],
						"title": "",
						"subtitle": "",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $newstate := $merge([$state, {'ended': true }]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.ledger;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($state.to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags);\n      $tags := $append($o.tags, $action.tags);\n      $x.log('tags', $tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "sendTo",
					"tags": [],
					"other": {},
					"ledger": "Ledger",
					"versionMajor": 1,
					"versionMinor": 0,
					"versionPatch": 0,
					"reducers": [
						{
							"type": "start",
							"language": "jsonata",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n"
						},
						{
							"type": "end",
							"language": "jsonata",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)"
						},
						{
							"type": "sendTo",
							"language": "jsonata",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)"
						}
					],
					"description": "send Description"
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "b76b4c414fb0b0cd7aafa95d08f1da0791fa7eed32f926c4657f09217ad59672"
			}
		},
		{
			"name": "sendTo",
			"result": {
				"outputs": [
					{
						"actionKey": "",
						"key": "sendTo",
						"ledger": "Alice",
						"data": {},
						"tags": [
							"sendTo"
						],
						"title": "",
						"subtitle": "",
						"description": "",
						"msgs": [],
						"coins": [
							{
								"amount": "9000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"other": {},
								"decimals": 18
							}
						]
					},
					{
						"ledger": "dominic",
						"data": [
							"Sent  1 ETH"
						],
						"coins": [
							{
								"amount": "1000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"decimals": 18
							}
						],
						"tags": [
							"sendTo"
						],
						"msgs": [],
						"title": "",
						"subtitle": "",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $newstate := $merge([$state, {'ended': true }]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msg := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.ledger;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($state.to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, [$msg]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "sendTo",
					"tags": [],
					"other": {},
					"ledger": "Ledger",
					"versionMajor": 1,
					"versionMinor": 0,
					"versionPatch": 0,
					"reducers": [
						{
							"type": "start",
							"language": "jsonata",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n"
						},
						{
							"type": "end",
							"language": "jsonata",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)"
						},
						{
							"type": "sendTo",
							"language": "jsonata",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)"
						}
					],
					"description": "send Description"
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "99763c6a4bb5f50da5c378a329037bffdd600b8a905b92452fc796b73bc1b324"
			}
		},
		{
			"name": "sendTo",
			"result": {
				"outputs": [
					{
						"actionKey": "",
						"key": "sendTo",
						"ledger": "Alice",
						"data": {},
						"tags": [
							"sendTo"
						],
						"title": "",
						"subtitle": "",
						"description": "",
						"msgs": [],
						"coins": [
							{
								"amount": "9000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"other": {},
								"decimals": 18
							}
						]
					},
					{
						"ledger": "dominic",
						"data": {},
						"coins": [
							{
								"amount": "1000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"decimals": 18
							}
						],
						"tags": [
							"sendTo"
						],
						"msgs": [
							"Sent  1 ETH"
						],
						"title": "",
						"subtitle": "",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $newstate := $merge([$state, {'ended': true }]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msg := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.ledger;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($state.to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msg]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "sendTo",
					"tags": [],
					"other": {},
					"ledger": "Ledger",
					"versionMajor": 1,
					"versionMinor": 0,
					"versionPatch": 0,
					"reducers": [
						{
							"type": "start",
							"language": "jsonata",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n"
						},
						{
							"type": "end",
							"language": "jsonata",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)"
						},
						{
							"type": "sendTo",
							"language": "jsonata",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)"
						}
					],
					"description": "send Description"
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "32db33535d76cea4ff0c11ed40a2a2041b67f81563c11de72482141afd9d534c"
			}
		},
		{
			"name": "sendTo",
			"result": {
				"outputs": [
					{
						"actionKey": "",
						"key": "sendTo",
						"ledger": "Alice",
						"data": {},
						"tags": [
							"sendTo"
						],
						"title": "",
						"subtitle": "",
						"description": "",
						"msgs": [],
						"coins": [
							{
								"amount": "9000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"other": {},
								"decimals": 18
							}
						]
					},
					{
						"ledger": "dominic",
						"data": {},
						"coins": [
							{
								"amount": "1000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"decimals": 18
							}
						],
						"tags": [
							"sendTo"
						],
						"msgs": [
							"Here's some more money, you lazy fuck"
						],
						"title": "",
						"subtitle": "",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $newstate := $merge([$state, {'ended': true }]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.ledger;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($state.to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "sendTo",
					"tags": [],
					"other": {},
					"ledger": "Ledger",
					"versionMajor": 1,
					"versionMinor": 0,
					"versionPatch": 0,
					"reducers": [
						{
							"type": "start",
							"language": "jsonata",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n"
						},
						{
							"type": "end",
							"language": "jsonata",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)"
						},
						{
							"type": "sendTo",
							"language": "jsonata",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)"
						}
					],
					"description": "send Description"
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "7c484bf6404e7b4ced4ca31727acb746333e2d25c39dad0cbfc6a5788de373c2"
			}
		},
		{
			"name": "sendTo",
			"result": {
				"outputs": [
					{
						"actionKey": "",
						"key": "sendTo",
						"ledger": "Alice",
						"data": {},
						"tags": [
							"sendTo"
						],
						"title": "",
						"subtitle": "",
						"description": "",
						"msgs": [],
						"coins": [
							{
								"amount": "9000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"other": {},
								"decimals": 18
							}
						]
					},
					{
						"ledger": "dominic",
						"data": {},
						"coins": [
							{
								"amount": "1000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"decimals": 18
							}
						],
						"tags": [
							"sendTo"
						],
						"msgs": [
							"Here's some more money, you lazy fuck"
						],
						"title": "Money from dad",
						"subtitle": "Money for rent, please don't snort it",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $newstate := $merge([$state, {'ended': true }]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.ledger;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($state.to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "sendTo",
					"tags": [],
					"other": {},
					"ledger": "Ledger",
					"versionMajor": 1,
					"versionMinor": 0,
					"versionPatch": 0,
					"reducers": [
						{
							"type": "start",
							"language": "jsonata",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n"
						},
						{
							"type": "end",
							"language": "jsonata",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)"
						},
						{
							"type": "sendTo",
							"language": "jsonata",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)"
						}
					],
					"description": "send Description"
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "37a7774fd2415eaee8889419c0b865d12c83d2a2551dc7e03eab04bc92f1f1b8"
			}
		},
		{
			"name": "sendTo",
			"result": {
				"outputs": [
					{
						"actionKey": "",
						"key": "sendTo",
						"ledger": "Alice",
						"data": {},
						"tags": [
							"sendTo"
						],
						"title": "My Money",
						"subtitle": "My Money",
						"description": "",
						"msgs": [],
						"coins": [
							{
								"amount": "9000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"other": {},
								"decimals": 18
							}
						]
					},
					{
						"ledger": "dominic",
						"data": {},
						"coins": [
							{
								"amount": "1000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"decimals": 18
							}
						],
						"tags": [
							"sendTo"
						],
						"msgs": [
							"Here's some more money, you lazy fuck"
						],
						"title": "Money from dad",
						"subtitle": "Money for rent, please don't snort it",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $newstate := $merge([$state, {'ended': true }]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.ledger;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($state.to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "sendTo",
					"tags": [],
					"other": {},
					"ledger": "Ledger",
					"versionMajor": 1,
					"versionMinor": 0,
					"versionPatch": 0,
					"reducers": [
						{
							"type": "start",
							"language": "jsonata",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n"
						},
						{
							"type": "end",
							"language": "jsonata",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)"
						},
						{
							"type": "sendTo",
							"language": "jsonata",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)"
						}
					],
					"description": "send Description"
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "fc21db17bc7bc58feace226cf2750c4c2761a415671653eab5e97bb3e5a2a4b5"
			}
		},
		{
			"name": "end",
			"result": {
				"outputs": [],
				"state": {
					"state": {
						"ended": true,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH",
								"sendTo ended"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': true, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.ledger;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($state.to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "sendTo",
					"tags": [],
					"other": {},
					"ledger": "Ledger",
					"versionMajor": 1,
					"versionMinor": 0,
					"versionPatch": 0,
					"reducers": [
						{
							"type": "start",
							"language": "jsonata",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n"
						},
						{
							"type": "end",
							"language": "jsonata",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)"
						},
						{
							"type": "sendTo",
							"language": "jsonata",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)"
						}
					],
					"description": "send Description"
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "1d3907a584ff021ed5256bc956a72db91d42d1fed804e20569d121d881cf1c9e"
			}
		},
		{
			"name": "end",
			"result": {
				"outputs": [],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH",
								"sendTo ended"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.ledger;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($state.to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "sendTo",
					"tags": [],
					"other": {},
					"ledger": "Ledger",
					"versionMajor": 1,
					"versionMinor": 0,
					"versionPatch": 0,
					"reducers": [
						{
							"type": "start",
							"language": "jsonata",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n"
						},
						{
							"type": "end",
							"language": "jsonata",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)"
						},
						{
							"type": "sendTo",
							"language": "jsonata",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)"
						}
					],
					"description": "send Description"
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "bb558393b8d3f164d6ce4d8525d306c92155fa5a283ab21bc38005edabca6de5"
			}
		},
		{
			"name": "sendTo",
			"result": {
				"outputs": [
					{
						"actionKey": "",
						"key": "sendTo",
						"ledger": "Alice",
						"data": {},
						"tags": [
							"sendTo"
						],
						"title": "My Money",
						"subtitle": "My Money",
						"description": "",
						"msgs": [],
						"coins": [
							{
								"amount": "9000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"other": {},
								"decimals": 18
							}
						]
					},
					{
						"ledger": "dominic",
						"data": {},
						"coins": [
							{
								"amount": "1000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"decimals": 18
							}
						],
						"tags": [
							"sendTo"
						],
						"msgs": [
							"Here's some more money, you lazy fuck"
						],
						"title": "Money from dad",
						"subtitle": "Money for rent, please don't snort it",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "incentum-send-to",
					"tags": [
						""
					],
					"other": {},
					"ledger": "itum1f0ke6tgw47v9wqxm4ukpntsgzlw4t7tdhxplyg",
					"versionMajor": 0,
					"versionMinor": 0,
					"versionPatch": 1,
					"reducers": [
						{
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"type": "start"
						},
						{
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"type": "end"
						},
						{
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"type": "sendTo"
						}
					],
					"description": "A contract to send tokens or coins to a specific ledger."
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "ba66679d5556604aecbda6866dde0183ea40e56190e96cae8c497e7a0c86f1cd"
			}
		},
		{
			"name": "start",
			"result": {
				"outputs": [
					{
						"ledger": "Alice",
						"data": {},
						"coins": [],
						"tags": [
							"sendTo"
						],
						"msgs": [],
						"title": "SendTo Dominic",
						"subtitle": "Coins to Dominic",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started"
							]
						}
					},
					"coins": [
						{
							"amount": "10000000000000000000",
							"symbol": "ETH",
							"mint": "mymint",
							"other": {},
							"decimals": 18
						}
					]
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "incentum-send-to",
					"tags": [
						""
					],
					"other": {},
					"ledger": "itum1f0ke6tgw47v9wqxm4ukpntsgzlw4t7tdhxplyg",
					"versionMajor": 0,
					"versionMinor": 0,
					"versionPatch": 1,
					"reducers": [
						{
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"type": "start"
						},
						{
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': true, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"type": "end"
						},
						{
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"type": "sendTo"
						}
					],
					"description": "A contract to send tokens or coins to a specific ledger."
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "5a98b197587d9601e8a0e52beff9d0596bb6d338c250f8b05af574abf8108340"
			}
		},
		{
			"name": "sendTo",
			"result": {
				"outputs": [
					{
						"actionKey": "",
						"key": "sendTo",
						"ledger": "Alice",
						"data": {},
						"tags": [
							"sendTo"
						],
						"title": "My Money",
						"subtitle": "My Money",
						"description": "",
						"msgs": [],
						"coins": [
							{
								"amount": "9000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"other": {},
								"decimals": 18
							}
						]
					},
					{
						"ledger": "dominic",
						"data": {},
						"coins": [
							{
								"amount": "1000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"decimals": 18
							}
						],
						"tags": [
							"sendTo"
						],
						"msgs": [
							"Here's some more money, you lazy fuck"
						],
						"title": "Money from dad",
						"subtitle": "Money for rent, please don't snort it",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "incentum-send-to",
					"tags": [
						""
					],
					"other": {},
					"ledger": "itum1f0ke6tgw47v9wqxm4ukpntsgzlw4t7tdhxplyg",
					"versionMajor": 0,
					"versionMinor": 0,
					"versionPatch": 1,
					"reducers": [
						{
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"type": "start"
						},
						{
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': true, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"type": "end"
						},
						{
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"type": "sendTo"
						}
					],
					"description": "A contract to send tokens or coins to a specific ledger."
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "4fccf263df3f6716a79e910400bcf996a4056e3416a6b23153ddd4c57a20e812"
			}
		},
		{
			"name": "end",
			"result": {
				"outputs": [],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH",
								"sendTo ended"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "incentum-send-to",
					"tags": [
						""
					],
					"other": {},
					"ledger": "itum1f0ke6tgw47v9wqxm4ukpntsgzlw4t7tdhxplyg",
					"versionMajor": 0,
					"versionMinor": 0,
					"versionPatch": 1,
					"reducers": [
						{
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"type": "start"
						},
						{
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': true, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"type": "end"
						},
						{
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"type": "sendTo"
						}
					],
					"description": "A contract to send tokens or coins to a specific ledger."
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "05b81763d777630910b4c182966cb602da2ffe8d7fbda2db13cbc0ea3cd4c034"
			}
		},
		{
			"name": "end",
			"result": {
				"outputs": [],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH",
								"sendTo ended"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': true,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "incentum-send-to",
					"tags": [
						""
					],
					"other": {},
					"ledger": "itum1f0ke6tgw47v9wqxm4ukpntsgzlw4t7tdhxplyg",
					"versionMajor": 0,
					"versionMinor": 0,
					"versionPatch": 1,
					"reducers": [
						{
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"type": "start"
						},
						{
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': true, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"type": "end"
						},
						{
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"type": "sendTo"
						}
					],
					"description": "A contract to send tokens or coins to a specific ledger."
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "c4b145b7f46d99c32c2a8873c45e535b377f771a492a197ae027cb1ad138d7e0"
			}
		},
		{
			"name": "end",
			"result": {
				"outputs": [],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH",
								"sendTo ended"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': true,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': false, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "incentum-send-to",
					"tags": [
						""
					],
					"other": {},
					"ledger": "itum1f0ke6tgw47v9wqxm4ukpntsgzlw4t7tdhxplyg",
					"versionMajor": 0,
					"versionMinor": 0,
					"versionPatch": 1,
					"reducers": [
						{
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"type": "start"
						},
						{
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': true, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"type": "end"
						},
						{
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"type": "sendTo"
						}
					],
					"description": "A contract to send tokens or coins to a specific ledger."
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "5e0e1f786a5135d3f1b95991cd3d89c6e75bb2e5910c02b4b84728245f604997"
			}
		},
		{
			"name": "end",
			"result": {
				"outputs": [],
				"state": {
					"state": {
						"ended": true,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH",
								"sendTo ended"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': true, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "incentum-send-to",
					"tags": [
						""
					],
					"other": {},
					"ledger": "itum1f0ke6tgw47v9wqxm4ukpntsgzlw4t7tdhxplyg",
					"versionMajor": 0,
					"versionMinor": 0,
					"versionPatch": 1,
					"reducers": [
						{
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"type": "start"
						},
						{
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': true, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"type": "end"
						},
						{
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"type": "sendTo"
						}
					],
					"description": "A contract to send tokens or coins to a specific ledger."
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "0015a467c1f2947cd1e789f6fa585aafd1091b2b59dee0d6f36b03618f5ee768"
			}
		},
		{
			"name": "ended",
			"result": {
				"outputs": [
					{
						"actionKey": "",
						"key": "sendTo",
						"ledger": "Alice",
						"data": {},
						"tags": [],
						"title": "My Money",
						"subtitle": "My Money",
						"description": "",
						"msgs": [
							"Contract was ended"
						],
						"coins": [
							{
								"amount": "10000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"decimals": 18
							}
						]
					}
				],
				"state": {
					"state": {
						"ended": true,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH",
								"sendTo ended"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': true, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "incentum-send-to",
					"tags": [
						""
					],
					"other": {},
					"ledger": "itum1f0ke6tgw47v9wqxm4ukpntsgzlw4t7tdhxplyg",
					"versionMajor": 0,
					"versionMinor": 0,
					"versionPatch": 1,
					"reducers": [
						{
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"type": "start"
						},
						{
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, ['sendTo ended']);\n      $merged := {\n        'ended': true, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"type": "end"
						},
						{
							"code": "(\n  $i := $inputs[0];\n  $o := $i.output;\n  $msgTo := $form.msg;\n  $idx := $form.coinIdx;\n  $coin := $o.coins[$idx];\n  $from := $state.from;\n  $to := $state.to;\n  $amount := $x.toCoinUnit($form.amount, $coin.decimals);\n  \n  $ended := $state.ended = true ? 'Contract was ended' : '';\n  $notOwned := $from != $action.ledger ? 'You are not the sender on this contract' : '';\n  $badAmount := $x.coin.greaterThanAmount($coin, $amount) ? 'The amount in the coin is less than the send amount': ''; \n  ($length($ended) > 0 or $length($notOwned) > 0 or $length($badAmount) > 0) ?\n    (\n      $msgs := $filter([$ended, $notOwned, $badAmount], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $merge([$o, { 'msgs': $msgs0 }]);\n      $x.result($state, [$output])\n    ) : (\n      $msg := 'Sent  ' & $form.amount & ' ' & $coin.symbol;\n      $view := {\n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $append($state.view.msgs, [$msg])\n        }\n      };\n      $newState := $merge([$state, $view]);\n\n      $sent := $merge([$coin, { 'amount': $amount }]);\n      $outTo := $x.output($to, [$sent], $form.title, $form.subtitle, $form.description, $action.tags, {}, [$msgTo]);\n      $tags := $append($o.tags, $action.tags);\n      $out := $x.outputLessCoin($o, $idx, $amount);\n      $outTags := $merge([$out, { 'tags': $tags}]);\n      $x.result($newState, [$outTags, $outTo])\n    )\n)",
							"language": "jsonata",
							"type": "sendTo"
						}
					],
					"description": "A contract to send tokens or coins to a specific ledger."
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "2c045a4526b25f2dfb3449546d902fbe82192518b619bc6e854e53ceab4f2b39"
			}
		},
		{
			"name": "start",
			"result": {
				"outputs": [
					{
						"ledger": "Alice",
						"data": {},
						"coins": [],
						"tags": [
							"sendTo"
						],
						"msgs": [],
						"title": "SendTo Dominic",
						"subtitle": "Coins to Dominic",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, [$form.msg]);\n      $merged := {\n        'ended': true, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $x.assert.equal($inputs.length, 1, 'only one input is allowed');\n  $x.assert.isNotTrue($state.ended, 'contract was ended');\n  $x.assert.equal($state.from, $action.ledger, 'you are not the owner of this contract');\n\n  $i := $inputs[0];\n  $o := $i.output;\n  $x.assert.isAtLeast($o.coins, 1, 'must have at least one coin');\n  $coin := $o.coins[0];\n  \n  $msg := 'Sent  ' & $coin.amount & ' ' & $coin.symbol;\n  $view := {\n    'view': {\n      'title': $state.view.title,\n      'subtitle': $state.view.subtitle,\n      'msgs': $append($state.view.msgs, [$msg])\n    }\n  };\n  $newState := $merge([$state, $view]);\n  $outTo := $x.output($state.to, $o.coins, $form.title, $form.subtitle, $form.description, $action.tags, {}, [$form.msg]);\n  $x.result($newState, [$outTo])\n)\n",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "incentum-send-to",
					"tags": [
						""
					],
					"other": {},
					"ledger": "itum1f0ke6tgw47v9wqxm4ukpntsgzlw4t7tdhxplyg",
					"versionMajor": 0,
					"versionMinor": 0,
					"versionPatch": 1,
					"reducers": [
						{
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"type": "start"
						},
						{
							"code": "(\n  $x.assert.isNotTrue($state.ended, 'contract was ended');\n  $x.assert.equal($state.from, $action.ledger, 'you are not the owner of this contract');\n  $x.assert.equal($count($inputs), 1, 'only one input is allowed');\n  $i := $inputs[0];\n  $o := $i.output;\n  $x.assert.equal($count($o.coins), 0, 'input cannot have any coins');\n\n  $msgs := $append($state.view.msgs, [$form.msg]);\n  $merged := {\n    'ended': true, \n    'view': {\n      'title': $state.view.title,\n      'subtitle': $state.view.subtitle,\n      'msgs': $msgs \n    }\n  };\n  $newstate := $merge([$state, $merged]);\n  $x.result($newstate)\n)",
							"language": "jsonata",
							"type": "end"
						},
						{
							"code": "(\n  $x.assert.equal($count($inputs), 1, 'only one input is allowed');\n  $x.assert.isNotTrue($state.ended, 'contract was ended');\n  $x.assert.equal($state.from, $action.ledger, 'you are not the owner of this contract');\n\n  $i := $inputs[0];\n  $o := $i.output;\n  $x.assert.isAtLeast($count($o.coins), 1, 'must have at least one coin');\n  $coin := $o.coins[0];\n  \n  $msg := 'Sent ' & $x.toDisplay($coin) & ' ' & $coin.symbol;\n  $view := {\n    'view': {\n      'title': $state.view.title,\n      'subtitle': $state.view.subtitle,\n      'msgs': $append($state.view.msgs, [$msg])\n    }\n  };\n  $newState := $merge([$state, $view]);\n  $outTo := $x.output($state.to, $o.coins, $form.title, $form.subtitle, $form.description, $action.tags, {}, [$form.msg]);\n  $x.result($newState, [$outTo])\n)\n",
							"language": "jsonata",
							"type": "sendTo"
						}
					],
					"description": "A contract to send tokens or coins to a specific ledger."
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "33afd56163808105f2ff6d0369952868d1781f6aa6f4a4b4718d47c97d0e5a92"
			}
		},
		{
			"name": "sendTo",
			"result": {
				"outputs": [
					{
						"ledger": "dominic",
						"data": {},
						"coins": [
							{
								"amount": "10000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"decimals": 18
							}
						],
						"tags": [
							"sendTo"
						],
						"msgs": [
							"Here's some more money"
						],
						"title": "Money from dad",
						"subtitle": "Money for rent",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  10000000000000000000 ETH"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, [$form.msg]);\n      $merged := {\n        'ended': true, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $x.assert.equal($count($inputs), 1, 'only one input is allowed');\n  $x.assert.isNotTrue($state.ended, 'contract was ended');\n  $x.assert.equal($state.from, $action.ledger, 'you are not the owner of this contract');\n\n  $i := $inputs[0];\n  $o := $i.output;\n  $x.assert.isAtLeast($count($o.coins), 1, 'must have at least one coin');\n  $coin := $o.coins[0];\n  \n  $msg := 'Sent  ' & $coin.amount & ' ' & $coin.symbol;\n  $view := {\n    'view': {\n      'title': $state.view.title,\n      'subtitle': $state.view.subtitle,\n      'msgs': $append($state.view.msgs, [$msg])\n    }\n  };\n  $newState := $merge([$state, $view]);\n  $outTo := $x.output($state.to, $o.coins, $form.title, $form.subtitle, $form.description, $action.tags, {}, [$form.msg]);\n  $x.result($newState, [$outTo])\n)\n",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "incentum-send-to",
					"tags": [
						""
					],
					"other": {},
					"ledger": "itum1f0ke6tgw47v9wqxm4ukpntsgzlw4t7tdhxplyg",
					"versionMajor": 0,
					"versionMinor": 0,
					"versionPatch": 1,
					"reducers": [
						{
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"type": "start"
						},
						{
							"code": "(\n  $x.assert.isNotTrue($state.ended, 'contract was ended');\n  $x.assert.equal($state.from, $action.ledger, 'you are not the owner of this contract');\n  $x.assert.equal($count($inputs), 1, 'only one input is allowed');\n  $i := $inputs[0];\n  $o := $i.output;\n  $x.assert.equal($count($o.coins), 0, 'input cannot have any coins');\n\n  $msgs := $append($state.view.msgs, [$form.msg]);\n  $merged := {\n    'ended': true, \n    'view': {\n      'title': $state.view.title,\n      'subtitle': $state.view.subtitle,\n      'msgs': $msgs \n    }\n  };\n  $newstate := $merge([$state, $merged]);\n  $x.result($newstate)\n)",
							"language": "jsonata",
							"type": "end"
						},
						{
							"code": "(\n  $x.assert.equal($count($inputs), 1, 'only one input is allowed');\n  $x.assert.isNotTrue($state.ended, 'contract was ended');\n  $x.assert.equal($state.from, $action.ledger, 'you are not the owner of this contract');\n\n  $i := $inputs[0];\n  $o := $i.output;\n  $x.assert.isAtLeast($count($o.coins), 1, 'must have at least one coin');\n  $coin := $o.coins[0];\n  \n  $msg := 'Sent ' & $x.toDisplay($coin) & ' ' & $coin.symbol;\n  $view := {\n    'view': {\n      'title': $state.view.title,\n      'subtitle': $state.view.subtitle,\n      'msgs': $append($state.view.msgs, [$msg])\n    }\n  };\n  $newState := $merge([$state, $view]);\n  $outTo := $x.output($state.to, $o.coins, $form.title, $form.subtitle, $form.description, $action.tags, {}, [$form.msg]);\n  $x.result($newState, [$outTo])\n)\n",
							"language": "jsonata",
							"type": "sendTo"
						}
					],
					"description": "A contract to send tokens or coins to a specific ledger."
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "33afd56163808105f2ff6d0369952868d1781f6aa6f4a4b4718d47c97d0e5a92"
			}
		},
		{
			"name": "sendTo",
			"result": {
				"outputs": [
					{
						"ledger": "dominic",
						"data": {},
						"coins": [
							{
								"amount": "10000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"decimals": 18
							}
						],
						"tags": [
							"sendTo"
						],
						"msgs": [
							"Here's some more money"
						],
						"title": "Money from dad",
						"subtitle": "Money for rent",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  10 ETH"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, [$form.msg]);\n      $merged := {\n        'ended': true, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $x.assert.equal($count($inputs), 1, 'only one input is allowed');\n  $x.assert.isNotTrue($state.ended, 'contract was ended');\n  $x.assert.equal($state.from, $action.ledger, 'you are not the owner of this contract');\n\n  $i := $inputs[0];\n  $o := $i.output;\n  $x.assert.isAtLeast($count($o.coins), 1, 'must have at least one coin');\n  $coin := $o.coins[0];\n  \n  $msg := 'Sent  ' & $x.toDisplay($coin) & ' ' & $coin.symbol;\n  $view := {\n    'view': {\n      'title': $state.view.title,\n      'subtitle': $state.view.subtitle,\n      'msgs': $append($state.view.msgs, [$msg])\n    }\n  };\n  $newState := $merge([$state, $view]);\n  $outTo := $x.output($state.to, $o.coins, $form.title, $form.subtitle, $form.description, $action.tags, {}, [$form.msg]);\n  $x.result($newState, [$outTo])\n)\n",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "incentum-send-to",
					"tags": [
						""
					],
					"other": {},
					"ledger": "itum1f0ke6tgw47v9wqxm4ukpntsgzlw4t7tdhxplyg",
					"versionMajor": 0,
					"versionMinor": 0,
					"versionPatch": 1,
					"reducers": [
						{
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"type": "start"
						},
						{
							"code": "(\n  $x.assert.isNotTrue($state.ended, 'contract was ended');\n  $x.assert.equal($state.from, $action.ledger, 'you are not the owner of this contract');\n  $x.assert.equal($count($inputs), 1, 'only one input is allowed');\n  $i := $inputs[0];\n  $o := $i.output;\n  $x.assert.equal($count($o.coins), 0, 'input cannot have any coins');\n\n  $msgs := $append($state.view.msgs, [$form.msg]);\n  $merged := {\n    'ended': true, \n    'view': {\n      'title': $state.view.title,\n      'subtitle': $state.view.subtitle,\n      'msgs': $msgs \n    }\n  };\n  $newstate := $merge([$state, $merged]);\n  $x.result($newstate)\n)",
							"language": "jsonata",
							"type": "end"
						},
						{
							"code": "(\n  $x.assert.equal($count($inputs), 1, 'only one input is allowed');\n  $x.assert.isNotTrue($state.ended, 'contract was ended');\n  $x.assert.equal($state.from, $action.ledger, 'you are not the owner of this contract');\n\n  $i := $inputs[0];\n  $o := $i.output;\n  $x.assert.isAtLeast($count($o.coins), 1, 'must have at least one coin');\n  $coin := $o.coins[0];\n  \n  $msg := 'Sent ' & $x.toDisplay($coin) & ' ' & $coin.symbol;\n  $view := {\n    'view': {\n      'title': $state.view.title,\n      'subtitle': $state.view.subtitle,\n      'msgs': $append($state.view.msgs, [$msg])\n    }\n  };\n  $newState := $merge([$state, $view]);\n  $outTo := $x.output($state.to, $o.coins, $form.title, $form.subtitle, $form.description, $action.tags, {}, [$form.msg]);\n  $x.result($newState, [$outTo])\n)\n",
							"language": "jsonata",
							"type": "sendTo"
						}
					],
					"description": "A contract to send tokens or coins to a specific ledger."
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "33afd56163808105f2ff6d0369952868d1781f6aa6f4a4b4718d47c97d0e5a92"
			}
		},
		{
			"name": "sendTo",
			"result": {
				"outputs": [
					{
						"ledger": "dominic",
						"data": {},
						"coins": [
							{
								"amount": "10000000000000000000",
								"symbol": "ETH",
								"mint": "mymint",
								"decimals": 18
							}
						],
						"tags": [
							"sendTo"
						],
						"msgs": [
							"Here's some more money"
						],
						"title": "Money from dad",
						"subtitle": "Money for rent",
						"description": ""
					}
				],
				"state": {
					"state": {
						"ended": false,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent 10 ETH"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $notOwned := $action.ledger != $state.from ? 'You are not the owner of this contract' : '';\n\n  ($length($notOwned) > 0) ?\n    (\n      $msgs := $filter([$notOwned], function($m) { $length($m) > 0 });\n      $msgs0 := $append([], $msgs);\n      $output := $x.output($action.ledger, [], $state.view.title, $state.view.subtitle, '', $action.tags, {}, $msgs0);\n      $x.result($state, [$output])\n    ) : (\n      $msgs := $append($state.view.msgs, [$form.msg]);\n      $merged := {\n        'ended': true, \n        'view': {\n          'title': $state.view.title,\n          'subtitle': $state.view.subtitle,\n          'msgs': $msgs \n        }\n      };\n      $newstate := $merge([$state, $merged]);\n      $x.result($newstate)\n    )\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $x.assert.equal($count($inputs), 1, 'only one input is allowed');\n  $x.assert.isNotTrue($state.ended, 'contract was ended');\n  $x.assert.equal($state.from, $action.ledger, 'you are not the owner of this contract');\n\n  $i := $inputs[0];\n  $o := $i.output;\n  $x.assert.isAtLeast($count($o.coins), 1, 'must have at least one coin');\n  $coin := $o.coins[0];\n  \n  $msg := 'Sent ' & $x.toDisplay($coin) & ' ' & $coin.symbol;\n  $view := {\n    'view': {\n      'title': $state.view.title,\n      'subtitle': $state.view.subtitle,\n      'msgs': $append($state.view.msgs, [$msg])\n    }\n  };\n  $newState := $merge([$state, $view]);\n  $outTo := $x.output($state.to, $o.coins, $form.title, $form.subtitle, $form.description, $action.tags, {}, [$form.msg]);\n  $x.result($newState, [$outTo])\n)\n",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "incentum-send-to",
					"tags": [
						""
					],
					"other": {},
					"ledger": "itum1f0ke6tgw47v9wqxm4ukpntsgzlw4t7tdhxplyg",
					"versionMajor": 0,
					"versionMinor": 0,
					"versionPatch": 1,
					"reducers": [
						{
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"type": "start"
						},
						{
							"code": "(\n  $x.assert.isNotTrue($state.ended, 'contract was ended');\n  $x.assert.equal($state.from, $action.ledger, 'you are not the owner of this contract');\n  $x.assert.equal($count($inputs), 1, 'only one input is allowed');\n  $i := $inputs[0];\n  $o := $i.output;\n  $x.assert.equal($count($o.coins), 0, 'input cannot have any coins');\n\n  $msgs := $append($state.view.msgs, [$form.msg]);\n  $merged := {\n    'ended': true, \n    'view': {\n      'title': $state.view.title,\n      'subtitle': $state.view.subtitle,\n      'msgs': $msgs \n    }\n  };\n  $newstate := $merge([$state, $merged]);\n  $x.result($newstate)\n)",
							"language": "jsonata",
							"type": "end"
						},
						{
							"code": "(\n  $x.assert.equal($count($inputs), 1, 'only one input is allowed');\n  $x.assert.isNotTrue($state.ended, 'contract was ended');\n  $x.assert.equal($state.from, $action.ledger, 'you are not the owner of this contract');\n\n  $i := $inputs[0];\n  $o := $i.output;\n  $x.assert.isAtLeast($count($o.coins), 1, 'must have at least one coin');\n  $coin := $o.coins[0];\n  \n  $msg := 'Sent ' & $x.toDisplay($coin) & ' ' & $coin.symbol;\n  $view := {\n    'view': {\n      'title': $state.view.title,\n      'subtitle': $state.view.subtitle,\n      'msgs': $append($state.view.msgs, [$msg])\n    }\n  };\n  $newState := $merge([$state, $view]);\n  $outTo := $x.output($state.to, $o.coins, $form.title, $form.subtitle, $form.description, $action.tags, {}, [$form.msg]);\n  $x.result($newState, [$outTo])\n)\n",
							"language": "jsonata",
							"type": "sendTo"
						}
					],
					"description": "A contract to send tokens or coins to a specific ledger."
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "33afd56163808105f2ff6d0369952868d1781f6aa6f4a4b4718d47c97d0e5a92"
			}
		},
		{
			"name": "end",
			"result": {
				"outputs": [],
				"state": {
					"state": {
						"ended": true,
						"to": "dominic",
						"from": "Alice",
						"view": {
							"title": "SendTo Dominic",
							"subtitle": "Coins to Dominic",
							"msgs": [
								"sendTo started",
								"Sent  1 ETH"
							]
						}
					},
					"coins": []
				},
				"mint": []
			},
			"contract": {
				"ledger": "Alice",
				"template": {
					"reducerMap": {
						"start": {
							"type": "start",
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"expr": {}
						},
						"end": {
							"type": "end",
							"code": "(\n  $x.assert.isNotTrue($state.ended, 'contract was ended');\n  $x.assert.equal($state.from, $action.ledger, 'you are not the owner of this contract');\n  $x.assert.equal($count($inputs), 1, 'only one input is allowed');\n  $i := $inputs[0];\n  $o := $i.output;\n  $x.assert.equal($count($o.coins), 0, 'input cannot have any coins');\n\n  $msgs := $append($state.view.msgs, [$form.msg]);\n  $merged := {\n    'ended': true, \n    'view': {\n      'title': $state.view.title,\n      'subtitle': $state.view.subtitle,\n      'msgs': $msgs \n    }\n  };\n  $newstate := $merge([$state, $merged]);\n  $x.result($newstate)\n)",
							"language": "jsonata",
							"expr": {}
						},
						"sendTo": {
							"type": "sendTo",
							"code": "(\n  $x.assert.equal($count($inputs), 1, 'only one input is allowed');\n  $x.assert.isNotTrue($state.ended, 'contract was ended');\n  $x.assert.equal($state.from, $action.ledger, 'you are not the owner of this contract');\n\n  $i := $inputs[0];\n  $o := $i.output;\n  $x.assert.isAtLeast($count($o.coins), 1, 'must have at least one coin');\n  $coin := $o.coins[0];\n  \n  $msg := 'Sent ' & $x.toDisplay($coin) & ' ' & $coin.symbol;\n  $view := {\n    'view': {\n      'title': $state.view.title,\n      'subtitle': $state.view.subtitle,\n      'msgs': $append($state.view.msgs, [$msg])\n    }\n  };\n  $newState := $merge([$state, $view]);\n  $outTo := $x.output($state.to, $o.coins, $form.title, $form.subtitle, $form.description, $action.tags, {}, [$form.msg]);\n  $x.result($newState, [$outTo])\n)\n",
							"language": "jsonata",
							"expr": {}
						}
					},
					"name": "incentum-send-to",
					"tags": [
						""
					],
					"other": {},
					"ledger": "itum1f0ke6tgw47v9wqxm4ukpntsgzlw4t7tdhxplyg",
					"versionMajor": 0,
					"versionMinor": 0,
					"versionPatch": 1,
					"reducers": [
						{
							"code": "(\n  $newstate := {\n    'ended': false,\n    'to': $form.to,\n    'from': $action.ledger,\n    'view': {\n      'title': $form.title,\n      'subtitle': $form.subtitle,\n      'msgs': ['sendTo started']\n    }\n  };\n  \n  $out := $x.output($action.ledger, [], $form.title, $form.subtitle, '', $action.tags);\n  \n  $x.result($newstate, [$out])\n)\n",
							"language": "jsonata",
							"type": "start"
						},
						{
							"code": "(\n  $x.assert.isNotTrue($state.ended, 'contract was ended');\n  $x.assert.equal($state.from, $action.ledger, 'you are not the owner of this contract');\n  $x.assert.equal($count($inputs), 1, 'only one input is allowed');\n  $i := $inputs[0];\n  $o := $i.output;\n  $x.assert.equal($count($o.coins), 0, 'input cannot have any coins');\n\n  $msgs := $append($state.view.msgs, [$form.msg]);\n  $merged := {\n    'ended': true, \n    'view': {\n      'title': $state.view.title,\n      'subtitle': $state.view.subtitle,\n      'msgs': $msgs \n    }\n  };\n  $newstate := $merge([$state, $merged]);\n  $x.result($newstate)\n)",
							"language": "jsonata",
							"type": "end"
						},
						{
							"code": "(\n  $x.assert.equal($count($inputs), 1, 'only one input is allowed');\n  $x.assert.isNotTrue($state.ended, 'contract was ended');\n  $x.assert.equal($state.from, $action.ledger, 'you are not the owner of this contract');\n\n  $i := $inputs[0];\n  $o := $i.output;\n  $x.assert.isAtLeast($count($o.coins), 1, 'must have at least one coin');\n  $coin := $o.coins[0];\n  \n  $msg := 'Sent ' & $x.toDisplay($coin) & ' ' & $coin.symbol;\n  $view := {\n    'view': {\n      'title': $state.view.title,\n      'subtitle': $state.view.subtitle,\n      'msgs': $append($state.view.msgs, [$msg])\n    }\n  };\n  $newState := $merge([$state, $view]);\n  $outTo := $x.output($state.to, $o.coins, $form.title, $form.subtitle, $form.description, $action.tags, {}, [$form.msg]);\n  $x.result($newState, [$outTo])\n)\n",
							"language": "jsonata",
							"type": "sendTo"
						}
					],
					"description": "A contract to send tokens or coins to a specific ledger."
				},
				"other": {},
				"title": "",
				"subtitle": "",
				"description": "",
				"key": "33afd56163808105f2ff6d0369952868d1781f6aa6f4a4b4718d47c97d0e5a92"
			}
		}
	],
	"resultSel": 0,
	"jsonSchemas": [
		{
			"name": "start",
			"json": "{\n  \"title\": \"Start a sendTo\",\n  \"type\": \"object\",\n  \"required\": [\n    \"to\",\n    \"title\",\n    \"subtitle\"\n  ],\n  \"properties\": {\n    \"title\": {\n      \"type\": \"string\",\n      \"title\": \"Title\"\n    },\n    \"subtitle\": {\n      \"type\": \"string\",\n      \"title\": \"Subtitle\"\n    },\n    \"to\": {\n      \"type\": \"string\",\n      \"title\": \"To\"\n    }\n  }\n}"
		},
		{
			"name": "sendTo",
			"json": "{\n  \"title\": \"Send an output\",\n  \"type\": \"object\",\n  \"required\": [\n    \"title\",\n    \"subtitle\",\n    \"msg\",\n    \"output:coin\"\n  ],\n  \"properties\": {\n    \"title\": {\n      \"type\": \"string\",\n      \"title\": \"Title\"\n    },\n    \"subtitle\": {\n      \"type\": \"string\",\n      \"title\": \"Subtitle\"\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"description\": \"Can be markdown\",\n      \"title\": \"Description\"\n    },\n    \"msg\": {\n      \"type\": \"string\",\n      \"title\": \"Message\"\n    },\n    \"output:coin\": {\n      \"title\": \"Output\",\n      \"type\": \"string\"\n    }\n  }\n}"
		},
		{
			"name": "end",
			"json": "{\n  \"title\": \"End a sendTo\",\n  \"type\": \"object\",\n  \"required\": [\n    \"msg\",\n    \"output:coin\"\n  ],\n  \"properties\": {\n    \"msg\": {\n      \"type\": \"string\",\n      \"title\": \"End Msg\"\n    },\n    \"output:coin\": {\n      \"title\": \"Output\",\n      \"type\": \"string\"\n    }\n  }\n}\n"
		}
	],
	"jsonSchemaSel": 1,
	"uiSchemas": [
		{
			"name": "start",
			"json": "{\n  \"title\": {\n    \"ui:emptyValue\": \"\"\n  },\n  \"subtitle\": {\n    \"ui:emptyValue\": \"\"\n  }\n}"
		},
		{
			"name": "sendTo",
			"json": "{\n  \"title\": {\n    \"ui:emptyValue\": \"\"\n  },\n  \"subtitle\": {\n    \"ui:emptyValue\": \"\"\n  },\n  \"description\": {\n    \"ui:widget\": \"textarea\",\n    \"ui:options\": {\n      \"rows\": 5\n    }\n  },\n  \"output:coin\": {\n    \"ui:widget\": \"praxOutputs\"\n  }\n}"
		},
		{
			"name": "end",
			"json": "{\n  \"output:coin\": {\n    \"ui:widget\": \"praxOutputs\"\n  }\n}"
		}
	],
	"uiSchemaSel": 1,
	"markdown": [
		{
			"name": "start",
			"json": "### Start sendTo contract\n\nStart a sendTo contract to track what you send to a \nparticular ledger. \n\nThe contract will send an output to your ledger that \nyou can easily tap to send more things.\n\nThe title and subtitle will be added to the output \nso you can identify it in your ledger.\n"
		},
		{
			"name": "sendTo",
			"json": "### Send an output to a recipient\n\nProvide a title, subtitle, description, and msg to the\nrecipient.\n"
		},
		{
			"name": "end",
			"json": "### End this sendTo contract.\n\nNote: send the initial output to consume\nand remove it from your ledger."
		}
	],
	"markdownSel": 1,
	"formData": "{\n\t\"msg\": \"ed\",\n\t\"output:coin\": \"sendTo\"\n}",
	"jsonSchemaObject": {
		"title": "End a sendTo",
		"type": "object",
		"required": [
			"msg",
			"output:coin"
		],
		"properties": {
			"msg": {
				"type": "string",
				"title": "End Msg"
			},
			"output:coin": {
				"title": "Output",
				"type": "string"
			}
		}
	},
	"uiSchemaObject": {
		"output:coin": {
			"ui:widget": "praxOutputs"
		}
	},
	"showSaveTemplateForm": false,
	"showSaveSchemasForm": false,
	"formSegment": 0,
	"schemaSel": 1
}